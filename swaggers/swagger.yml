openapi: 3.0.0
info:
  title: tabcolab-api
  version: 0.0.0
  description: ''
servers:
  - url: http://localhost:3000
tags:
  - name: Groups
    description: Operations related to groups management
  - name: Items(Spec)
    description: Specific operations related to items management
  - name: Items
    description: General operations related to items management
paths:
  /groups:
    get:
      tags:
        - Groups
      summary: Display all groups and their items in workspace
      description: Display all groups and their items in workspace.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/responses/getGroups200'
              example:
                groups:
                  - id: '1'
                    group_icon: group_icon_url
                    group_title: Group 1
                    items:
                      - item_id: '1'
                        item_type: 0
                        browserTab_favIconURL: http://favicon_url.ico
                        browserTab_title: Tab Title
                        browserTab_url: http://tab_url.com
                        note_content: ''
                        note_bgColor: '#ffffff'
                        browserTab_id: 123
                        browserTab_index: 12
                        browserTab_active: false
                        browserTab_status: "complete"
                        windowId: 1348438505
                      - item_id: '2'
                        item_type: 1
                        note_content: Note content
                        note_bgColor: '#ffffff'
                      - item_id: '3'
                        item_type: 2
                        doneStatus: false
        '404':
          $ref: '#/components/responses/getGroups404'
    post:
      tags:
        - Groups
      summary: Create a new group in workspace
      description: 'Create a new group in the workspace. <br> It includes three scenarios: <br> 1. Create Group at Blank Space; <br> 2. Create Group by Dragging a Tab From Sidebar to Blank Space;<br> 3. Create Group by Dragging a Tab From a Group to Blank Space. '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/requestBodies/GroupCreateatBlank'
                - $ref: '#/components/requestBodies/GroupCreatewithSidebarTabatBlank'
                - $ref: '#/components/requestBodies/GroupCreatewithGroupTabtoBlank'
            examples:
              GroupCreateatBlank:
                summary: Group Create at Blank
                value:
                  group_icon: https://example.com/group_icon1.png
                  group_title: Group 1
              GroupCreatewithSidebarTabatBlank:
                summary: Group Create with SidebarTab at Blank
                value:
                  browserTab_favIconURL: https://example.com/favicon.png
                  browserTab_title: Example Tab Title
                  browserTab_url: https://example.com
                  group_icon: https://example.com/group_icon2.png
                  group_title: Group 2
                  browserTab_id: 133
                  browserTab_index: 15
                  browserTab_active: false
                  browserTab_status: "complete"
                  windowId: 3850513484
              GroupCreatewithGroupTabtoBlank:
                summary: Group Create with Group Tab to Blank
                value:
                  sourceGroup_id: '1'
                  item_id: '1'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/responses/GroupatBlankCreatedResponse'
                  - $ref: '#/components/responses/GroupwithSidebarTabCreatedResponse'
                  - $ref: '#/components/responses/GroupwithGroupTabCreatedResponse'
        '400':
          description: Bad Request
  /groups/{group_id}:
    patch:
      tags:
        - Groups
      summary: Modify group info or status
      description: Modify group information or status:<br> 1. Modify group icon, group title <br>2. Changing group position
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            $ref: '#/components/schemas/Group/properties/group_id'
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/requestBodies/GroupUpdate'
                - $ref: '#/components/requestBodies/GroupChangePos'
            examples:
              GroupUpdateIconExample:
                summary: Modifying group information (Icon)
                value:
                  group_icon: https://example.com/updated_icon.png
              GroupUpdateTitleExample:
                summary: Modifying group information (Title)
                value:
                  group_title: Updated Group Title
              GroupChangePosExample:
                summary: Changing group position
                value:
                  group_pos: 1
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - Groups
      summary: Delete groups (including their tabs)
      description: Delete groups (including their tabs).
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            $ref: '#/components/schemas/Group/properties/group_id'
          example: 1
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /groups/{group_id}/items/{item_id}:
    parameters:
      - name: group_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Group/properties/group_id'
        example: 1
      - name: item_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Item/properties/item_id'
        example: 1
    patch:
      tags:
        - Items
      summary: Move item (tab, note, todo) within or between existing Groups
      description: Move item (tab, note, todo) :<br> 1. Within existing Groups <br> 2. Between existing Groups
      operationId: groupItemDragPatchGroup
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/requestBodies/ItemMoveinGroup'
                - $ref: '#/components/requestBodies/ItemMovetoGroup'
            examples:
              ItemMoveinGroup:
                summary: Moving an item within the same group.
                value:
                  targetItem_position: 2
              ItemMovetoGroup:
                summary: Moving an item to a different group.
                value:
                  targetItem_position: 1
                  targetGroup_id: '2'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - Items
      summary: Remove item (tab, note, todo) from existing Group
      operationId: groupPatchItem
      responses:
        '204':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /groups/{group_id}/tabs:
    parameters:
      - name: group_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Group/properties/group_id'
        example: 1
    post:
      tags:
        - Items(Spec)
      summary: Add a new tab to an existing Group by dragging from Sidebar
      operationId: sidebarDragCreateGroupTab
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/addTab'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
  /groups/{group_id}/tabs/{item_id}:
    parameters:
      - name: group_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Group/properties/group_id'
        example: 2
      - name: item_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Item/properties/item_id'
        example: 3
    patch:
      tags:
        - Items(Spec)
      summary: Add or Modify a note within a tab
      operationId: groupTabPatchNote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateTab'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /groups/{group_id}/notes:
    post:
      tags:
        - Items(Spec)
      summary: Add a note to an existing group
      description: Add a note to an existing group.
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            $ref: '#/components/schemas/Group/properties/group_id'
          example: '2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/addNote'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  item_id:
                    $ref: '#/components/schemas/Item/properties/item_id'
        '400':
          description: Bad Request
  /groups/{group_id}/notes/{item_id}:
    patch:
      tags:
        - Items(Spec)
      summary: Change a note to a todo in an existing group
      description: Change a note to a todo in an existing group.
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            $ref: '#/components/schemas/Group/properties/group_id'
          example: 2
        - name: item_id
          in: path
          description: Item ID
          required: true
          schema:
            $ref: '#/components/schemas/Item/properties/item_id'
          example: 5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/TabNoteChangetoTodo'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /groups/{group_id}/todos/{item_id}:
    patch:
      tags:
        - Items(Spec)
      summary: Change a todo status in an existing group
      description: Change a todo status in an existing group. <br> 1. Change item type of todo to note <br>2. Update the doneStatus of  todo
      parameters:
        - name: group_id
          in: path
          description: Group ID
          required: true
          schema:
            $ref: '#/components/schemas/Group/properties/group_id'
          example: 2
        - name: item_id
          in: path
          description: Item ID
          required: true
          schema:
            $ref: '#/components/schemas/Item/properties/item_id'
          example: 6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/requestBodies/TodoChangetoNote'
                - $ref: '#/components/requestBodies/TodoStatusUpdate'
            examples:
              TodotoNoteExample:
                summary: Change todo to note
                value:
                  item_type: 1
              TodoStatusUpdateExample:
                summary: Update todo status
                value:
                  doneStatus: true
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /users/:id:
    get:
      tags:
        - Users
      description: Returns user data based on the provided ID.
      parameters:
        - $ref: '#/parameters/userIdParam'
      responses:
        '200':
          description: User data retrieved successfully.
          content:
            application/json:
              $ref: '#/responses/userIdResponse200'
responses:
  userIdResponse200:
    schema:
      type: object
      properties:
        status:
          type: string
          example: 200
        data:
          properties:
            name:
              $ref: '#/components/schemas/User/properties/name'
            account:
              $ref: '#/components/schemas/User/properties/account'
parameters:
  userIdParam:
    name: id
    in: path
    description: ID of the user
    required: true
    schema:
      $ref: '#/components/schemas/User/properties/id'
components:
  responses:
    getGroups200:
      schema:
        type: array
        items:
          $ref: '#/components/schemas/Group'
    getGroups404:
      description: No group in workspace
      content:
        application/json:
          example:
            statusCode: 404
            type: error
            message: No group in workspace
    GroupwithSidebarTabCreatedResponse:
      description: Group created with tab from sidebar successfully
      type: object
      properties:
        message:
          type: string
          value: Sidebar group created successfully
        group_id:
          $ref: '#/components/schemas/Group/properties/group_id'
        item_id:
          $ref: '#/components/schemas/Item/properties/item_id'
    GroupatBlankCreatedResponse:
      description: Group created with tab from other group successfully
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/Group/properties/group_id'
    GroupwithGroupTabCreatedResponse:
      description: group created at blank space successfully
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/Group/properties/group_id'
  requestBodies:
    GroupCreatewithSidebarTabatBlank:
      description: Create Group by Dragging a Tab From Sidebar to Blank Space.
      type: object
      allOf:
        - $ref: '#/components/schemas/ChromeTabInfo'
        - group_icon:
          $ref: '#/components/schemas/Group/properties/group_icon'
        - group_title:
          $ref: '#/components/schemas/Group/properties/group_title'
    GroupCreateatBlank:
      description: Create Group at Blank Space.
      type: object
      properties:
        group_icon:
          $ref: '#/components/schemas/Group/properties/group_icon'
        group_title:
          $ref: '#/components/schemas/Group/properties/group_title'
    GroupCreatewithGroupTabtoBlank:
      description: Create Group by Dragging a Tab From a Group to Blank Space.
      type: object
      properties:
        sourceGroup_id:
          $ref: '#/components/schemas/Group/properties/group_id'
        item_id:
          $ref: '#/components/schemas/Item/properties/item_id'
    GroupUpdate:
      description: Modify group info.
      type: object
      oneOf:
        group_icon:
          $ref: '#/components/schemas/Group/properties/group_icon'
        group_title:
          $ref: '#/components/schemas/Group/properties/group_title'
    GroupChangePos:
      description: Change group position.
      type: object
      properties:
        group_pos:
          type: integer
          minimum: 0
    ItemMoveinGroup:
      description: Move item within existing Groups
      type: object
      properties:
        targetItem_position:
          type: integer
          minimum: 0
    ItemMovetoGroup:
      description: Move item between existing Groups
      type: object
      properties:
        targetItem_position:
          type: integer
          minimum: 0
        targetGroup_id:
          $ref: '#/components/schemas/Group/properties/group_id'
    addTab:
      description: Add a new tab to an existing Group by dragging from Sidebar
      type: object
      allOf:
        - $ref: '#/components/schemas/ChromeTabInfo'
        - targetItem_position:
          type: integer
          minimum: 0
    updateTab:
      type: object
      properties:
        note_content:
          $ref: '#/components/schemas/Tab/properties/note_content'
    addNote:
      description: Create a note in group.
      type: object
      properties:
        note_content:
          type: string
        note_bgColor:
          type: string
      example:
        note_content: ''
        note_bgColor: '#ffffff'
    TabNoteChangetoTodo:
      description: Convert a tab to a todo.
      type: object
      properties:
        item_type:
          type: integer
          enum:
            - 2
    TodoChangetoNote:
      description: Convert a todo to a note in an existing group.
      type: object
      properties:
        item_type:
          type: integer
          enum:
            - 1
    TodoStatusUpdate:
      description: Check/uncheck a todo in an existing group.
      type: object
      properties:
        doneStatus:
          type: boolean
  schemas:
    Group:
      type: object
      properties:
        group_id:
          type: string
        group_icon:
          type: string
        group_title:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
      required:
        - group_id
        - group_icon
        - group_title
        - items
    Item:
      type: object
      properties:
        item_id:
          type: string
        item_type:
          type: integer
          enum: [0, 1, 2]
          description: '0: Tab, 1: Note, 2: Todo'
      oneOf:
        - $ref: '#/components/schemas/Tab'
        - $ref: '#/components/schemas/Note'
        - $ref: '#/components/schemas/Todo'
      required:
        - item_id
        - item_type
    Tab:
      type: object
      allOf:
        - $ref: '#/components/schemas/ChromeTabInfo'
        - properties:
            note_content:
              type: string
            note_bgColor:
              type: string
      required:
        - note_bgColor
    Note:
      type: object
      properties:
        note_content:
          type: string
        note_bgColor:
          type: string
      required:
        - note_content
        - note_bgColor
    Todo:
      type: object
      properties:
        note_content:
          type: string
        note_bgColor:
          type: string
        doneStatus:
          type: boolean
          description: Indicates whether the todo is done or not
      required:
        - note_content
        - note_bgColor
        - doneStatus
    ChromeTabInfo:
      type: object
      properties:
        browserTab_favIconURL:
          type: string
        browserTab_title:
          type: string
        browserTab_url:
          type: string
        browserTab_id:
          type: integer
        browserTab_index:
          type: integer
        browserTab_active:
          type: boolean
        browserTab_status:
          type: string
          enum:
            - "complete"
            - "loading"
            - "unloaded"
        windowId:
          type: integer
          example: 1348438505
      required:
        - browserTab_favIconURL
        - browserTab_title
        - browserTab_url
        - browserTab_id
        - browserTab_index
        - browserTab_active
        - browserTab_status
        - windowId
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: John Doe
        account:
          type: string
          format: email
          example: john.doe@example.com
        password:
          description: The password must contain at least 8 characters and can only contain letters and numbers.
          type: string
          pattern: ^[a-zA-Z0-9]{8,}$
        paid:
          type: boolean
        paidDate:
          type: string
          format: date-time
      required:
        - id
        - name
        - account
        - password
